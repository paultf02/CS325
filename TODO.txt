Global Variable
CreateEntryBlockAlloca Type
Function Proto Has Unique Arg Names 
Function Call Has Args That Match Types or Satisfy Conditions 
Assignment only done with LHS a valid variable and RHS appropriate Type
Function Return Type is of a valid type.
If Condition and While Loop Condition Type Semantics
Binary operations widen both their inputs to the widest of the two
  Then compute result
  Then possibly store result in
    variable
    while loop condition
    if condition
    nowhere for plain function calls;
&& and || short circuit
Abstract Syntax Tree beautifying

If and while conditions not working
  ICmp operand types not matching
  https://stackoverflow.com/questions/35856196/llvm-test-example-issue-with-type-comparison
  Need to do casting
Type checking:
for a binary operation what are the rules if different types?
Should we have a boolean just be a 0 or 1 in 32 bits?
How does assessing the truth or falsity of 32 bits work?

% can only take integers and bool
&& need to implement short circuit
|| need to implement short circuit
binary +
unary +
binary -
unary -
*
/
%
==
!=
<=
<
>
>=
unary !

if we have a binary operation between two types, we promote lower to higher.

Integer division of positive values truncates towards zero, so 5/3 is 1. However, if either operand is negative, the direction of rounding is implementation-defined.

https://www.gnu.org/software/gnu-c-manual/gnu-c-manual.html#Assignment-Operators

The type in CreateEntryBlockAlloca will need to be changed
function arguments cant have the same name
variable cant be declared twice
cant be a function defined twice
checks for return value for function? check c99 spec. widening only allowed.
global variable can only be defined once.

In C99 it is valid to have a global variable defined multiple times in the same file. For MiniC you should only
allow a global variable to be defined once. However, re-declaration of a global variable within a local scope
should be allowed.

Allow only widening conversions when returning an incorrect type (i.e. a type different to that of the declared
type in the function definition) at the end of a function. So for example if an int function returns float this is a
semantic error, but if a float function returns an int promote the int to a float and return without flagging and
error

In C99, it is also allowed to call a function with differing argument types. e.g: int func(int a){return a;}int
x = func(1.0);. For your compiler, again flag narrowing conversions as errors and allow widening conversions.

Implementing the C/C++ convention of lazy evaluation (boolean short circuit code generation) for && and ||
operators correctly, will be awarded extra marks.   

Make AST Prettier by renaming if then else components. change expr to condition, first block to then, second block to else

For Global Variable when and where should we create value

CreateEntryBlockAlloca needs to have multiple types possible
  FIX THIS

we cannot assign to something that isnt a variable (so not an int, bool, float)

Type mismatch
Undeclared variable
Reserved identifier misuse.
Multiple declaration of variable in a scope.
Accessing an out of scope variable.
Actual and formal parameter mismatch.
Check the cases where you are returning nullptr in parser
Check not accidentally eating tokens after calling another parse function
Add an error if we are in the middle of a lookahead and run out of tokens

Clean up namespaces and all that. Be consistent across the entire project.